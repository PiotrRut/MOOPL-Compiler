// inputs: 0
// output: 1 3 5 7 9

proc main() {
  local int[] a;
  a = new int[5];
  a[0] = 9;
  a[1] = 1;
  a[2] = 3;
  a[3] = 7;
  a[4] = 5;
  sort(a);
  local int i;
  i = 0;
  while (i < (a.length)) do
  {
    output a[i];
    outchar 32;
    i = i + 1;
  }
  outchar 13;
  outchar 10;
}

proc sort(int[] a) {
  quicksort(a, 0, (a.length) - 1);
}

proc quicksort(int[] a, int lo, int hi) {
  if (lo < hi) then
  {
    local int p;
    p = partition(a, lo, hi);
    quicksort(a, lo, p);
    quicksort(a, p + 1, hi);
  }
  else
  {
  }
}

fun int partition(int[] a, int lo, int hi) {
  local int pivot;
  pivot = a[lo + ((hi - lo) div 2)];
  local int i;
  i = lo;
  local int j;
  j = hi;
  local boolean unsorted;
  unsorted = true;
  while (unsorted) do
  {
    while ((a[i]) < pivot) do i = i + 1;
    while (pivot < (a[j])) do j = j - 1;
    if (j < (i + 1)) then
      unsorted = false;
    else
      swap(a, i, j);
  }
  return j;
}

proc swap(int[] a, int i, int j) {
  local int x;
  x = a[i];
  a[i] = a[j];
  a[j] = x;
}
