options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

/* White-space and comments */
SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Terminal symbols */
TOKEN :
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < INT: "int" >
| < NEW: "new" >
| < SELF: "self" >
| < RETURN: "return" >
| < EXTENDS: "extends" >
| < LOCAL: "local" >
| < BOOLEAN: "boolean" >
| < OUTPUT: "output" >
| < WHILE: "while" >
| < DO: "do" >
| < IF: "if" >
| < ELSE: "else">
| < THEN: "then" >
| < TRUE: "true" >
| < FALSE: "false" >
| < LENGTH: "length" >
| < ISNULL: "isnull" >
| < LBRACKET: "{" >
| < RBRACKET: "}" >
| < LSQRBRACKET: "[" >
| < RSQRBRACKET: "]" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < PERIOD: "." >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < INTEGER_LITERAL: (["0"-"9"])+ >
| < NOT: "!" >
| < LOG_AND: "and" >
| < LESS_THAN: "<" >
| < EQUAL_TO: "==">
| < ASSIGN_OP: "=" >
| < DIV: "div" >
| < ADD: "+" >
| < SUBT: "-" >
| < MULT: "*" >
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* TOKEN tester */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <INT>
      | t = <NEW>
      | t = <SELF>
      | t = <RETURN>
      | t = <EXTENDS>
      | t = <LOCAL>
      | t = <BOOLEAN>
      | t = <OUTPUT>
      | t = <WHILE>
      | t = <DO>
      | t = <IF>
      | t = <ELSE>
      | t = <THEN>
      | t = <TRUE>
      | t = <FALSE>
      | t = <LENGTH>
      | t = <ISNULL>
      | t = <LBRACKET>
      | t = <RBRACKET>
      | t = <LSQRBRACKET>
      | t = <RSQRBRACKET>
      | t = <LPAREN>
      | t = <RPAREN>
      | t = <PERIOD>
      | t = <SEMICOLON>
      | t = <COMMA>
      | t = <NOT>
      | t = <LOG_AND>
      | t = <LESS_THAN>
      | t = <EQUAL_TO>
      | t = <ASSIGN_OP>
      | t = <DIV>
      | t = <ADD>
      | t = <SUBT>
      | t = <MULT>
      )
      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
  <EOF>
}


/************************************
 * The Moopl grammar starts here *
 ************************************/

public void nt_Program() :
{ }
{
  ( nt_ProcDecl() )+ ( nt_ClassDecl() )* <EOF>
}

public void nt_ClassDecl() :
{ }
{
    LOOKAHEAD(3) <CLASS> <ID> <LBRACKET> (nt_FieldDecl())* (nt_MethodDecl())* <RBRACKET>
  | <CLASS> <ID> <EXTENDS> <ID> <LBRACKET> (nt_FieldDecl())* (nt_MethodDecl())* <RBRACKET>
}

public void nt_FieldDecl() :
{ }
{
  <ID>
}

public void nt_MethodDecl() :
{ }
{
  nt_ProcDecl() | nt_FunDecl()
}

public void nt_FunDecl() :
{ }
{
  <FUN> // TO BE COMPLETED...
}

public void nt_ProcDecl() :
{ }
{
  <PROC> // TO BE COMPLETED...
}

public void nt_PrimaryExp() :
{}
{
  <INTEGER_LITERAL> // TODO: ADD MISSING CASES...
}

public void nt_Op() :
{}
{
    <LOG_AND>
  | <EQUAL_TO>
  | <LESS_THAN>
  | <DIV>
  | <ADD>
  | <SUBT>
  | <MULT>
}

public void nt_Exp() :
{}
{
<NEW>
}
