options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

SKIP : /* White-space and comments */
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* Terminal symbols */
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < INT: "int" >

// LOTS OF TOKENS MISSING HERE!

| < INTEGER_LITERAL: (["0"-"9"])+ >
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

/*
 * TOKEN tester
 */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <INT>
        // ADD YOUR OWN TOKENS HERE AS YOU DEFINE EACH ONE
      )
      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
  <EOF>
}


/************************************
 * The Moopl grammar starts here *
 ************************************/

public void nt_Program() :
{ }
{
  ( nt_ProcDecl() )+ ( nt_ClassDecl() )* <EOF>
}

public void nt_ClassDecl() :
{ }
{
  <CLASS> // TO BE COMPLETED...
}

public void nt_FieldDecl() :
{ }
{
  <ID>
}

public void nt_MethodDecl() :
{ }
{
  nt_ProcDecl() | nt_FunDecl()
}

public void nt_FunDecl() :
{ }
{
  <FUN> // TO BE COMPLETED...
}

public void nt_ProcDecl() :
{ }
{
  <PROC> // TO BE COMPLETED...
}

public void nt_PrimaryExp() :
{}
{
  <INTEGER_LITERAL> // TODO: ADD MISSING CASES...
}

// TODO: ADD THE MISSING NON-TERMINALS...
