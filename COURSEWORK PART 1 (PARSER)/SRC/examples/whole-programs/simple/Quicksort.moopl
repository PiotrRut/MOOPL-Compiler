/* See Wikipedia page for the quicksort algorithm. */

proc main() {
  local int[] a;
  a = new int[5];
  a[0] = 9;
  a[1] = 1;
  a[2] = 3;
  a[3] = 7;
  a[4] = 5;
  local Quicksort qs;
  qs = new Quicksort();
  qs.sort(a);
  local int i;
  i = 0;
  while (i < (a.length)) do {
    output a[i];
    i = i + 1;
  }
}

class Quicksort {
  proc Quicksort() {}

  proc sort(int[] a) {
    self.quicksort(a, 0, (a.length) - 1);
  }

  proc quicksort(int[] a, int lo, int hi) {
    if (lo < hi) then {
      local int p;
      p = self.partition(a, lo, hi);
      self.quicksort(a, lo, p - 1);
      self.quicksort(a, p + 1, hi);
    } else {}
  }

  fun int partition(int[] a, int lo, int hi) {
    local int pivot;
    pivot = a[hi];
    local int i;
    i = lo; // place for swapping
    local int j;
    j = lo;
    while (j < hi) do {
      if ((a[j]) < (pivot + 1)) then {
        self.swap(a, i, j);
        i = i + 1;
      } else {}
      j = j + 1;
    }
    self.swap(a, i, hi);
    return i;
  }

  proc swap(int[] a, int i, int j) {
    local int x;
    x = a[i];
    a[i] = a[j];
    a[j] = x;
  }
}
