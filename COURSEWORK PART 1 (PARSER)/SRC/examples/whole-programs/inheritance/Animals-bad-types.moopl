proc main() {
  output new AnimalTest(10).test();
}

proc test(int count) {
  output new AnimalTest(count).test();
}

/* In Java we would make this an abstract class. */
class Animal {

  fun int legsCount() {
    return 1 div 0;
    // In Java we would make this an abstract method with an empty body.
    // Here we deliberately cause a runtime error in case we make a
    // coding error and fail to override legsCount in a descendant class.
  }
}

class Human extends Animal {
  proc Human() {}
  fun int legsCount() { return 2; }
}

class Dog extends Animal {
  proc Dog() {}
  fun int legsCount() { return 4; }
}

class Snake extends Animal {
  proc Snake() {}
  fun int legsCount() { return false; }
}

class AnimalTest {

  int n;

  proc AnimalTest(int n_) {
    n = n_;
  }

  fun int test() {
    local Animal[] animals;
    animals = new Animal[5];
    animals[0] = new Snake();
    animals[1] = new Human();
    animals[2] = new Dog();
    animals[3] = new Snake();
    animals[4] = new Dog();
    local Animal[] lotsOfAnimals;
    lotsOfAnimals = new Animal[(animals.length) * n];
    {
      local int i;
      i = 0;
      while (i - (lotsOfAnimals.length)) do {
        local int j;
        j = 0;
        while (j < (animals.length)) do {
          lotsOfAnimals[i + j] = animals[j];
          j = j + 1;
        }
        i = i + (animals.length);
      }
    }
    local int sum;
    sum = 0;
    {
      local int i;
      i = 0;
      while (i < (lotsOfAnimals.length)) do {
        sum = sum + ((lotsOfAnimals[i]).legsCount());
        i = i + 1;
      }
    }
    return sum;
  }
}
