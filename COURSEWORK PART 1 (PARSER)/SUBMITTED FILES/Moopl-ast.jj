options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import java.util.List;
  import java.util.ArrayList;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

/* White-space and comments */
SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | < "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

/* Terminal symbols */
TOKEN :
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < INT: "int" >
| < NEW: "new" >
| < SELF: "self" >
| < RETURN: "return" >
| < EXTENDS: "extends" >
| < LOCAL: "local" >
| < BOOLEAN: "boolean" >
| < OUTPUT: "output" >
| < WHILE: "while" >
| < DO: "do" >
| < IF: "if" >
| < ELSE: "else">
| < THEN: "then" >
| < TRUE: "true" >
| < FALSE: "false" >
| < LENGTH: "length" >
| < ISNULL: "isnull" >
| < LBRACKET: "{" >
| < RBRACKET: "}" >
| < L_SQR_BRACKET: "[" >
| < R_SQR_BRACKET: "]" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < PERIOD: "." >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < INTEGER_LITERAL: (["0"-"9"])+ >
| < NOT: "!" >
| < LOG_AND: "and" >
| < LESS_THAN: "<" >
| < EQUAL_TO: "==">
| < ASSIGN_OP: "=" >
| < DIV: "div" >
| < ADD: "+" >
| < SUBT: "-" >
| < MULT: "*" >
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >
}

/* TOKEN tester */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <INT>
      | t = <NEW>
      | t = <SELF>
      | t = <RETURN>
      | t = <EXTENDS>
      | t = <LOCAL>
      | t = <BOOLEAN>
      | t = <OUTPUT>
      | t = <WHILE>
      | t = <DO>
      | t = <IF>
      | t = <ELSE>
      | t = <THEN>
      | t = <TRUE>
      | t = <FALSE>
      | t = <LENGTH>
      | t = <ISNULL>
      | t = <LBRACKET>
      | t = <RBRACKET>
      | t = <L_SQR_BRACKET>
      | t = <R_SQR_BRACKET>
      | t = <LPAREN>
      | t = <RPAREN>
      | t = <PERIOD>
      | t = <SEMICOLON>
      | t = <COMMA>
      | t = <NOT>
      | t = <LOG_AND>
      | t = <LESS_THAN>
      | t = <EQUAL_TO>
      | t = <ASSIGN_OP>
      | t = <DIV>
      | t = <ADD>
      | t = <SUBT>
      | t = <MULT>
      )
      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
  <EOF>
}


/************************************
 * The Moopl grammar starts here *
 ************************************/

public Program nt_Program() :
{
ProcDecl pds;
ClassDecl cds;
List<ProcDecl> pdl = new LinkedList<ProcDecl>();
List<ClassDecl> cdl = new LinkedList<ClassDecl>();
}
{
(pds=nt_ProcDecl(){pdl.add(pds); }) + (cds=nt_ClassDecl(){cdl.add(cds); })* <EOF>
{ return new Program(pdl, cdl); }
}

public ClassDecl nt_ClassDecl() :
{
Token t, t2;
FieldDecl fds;
MethodDecl mds;
List<FieldDecl> fdl = new LinkedList<FieldDecl>();
List<MethodDecl> mdl = new LinkedList<MethodDecl>();
}
{
    <CLASS> t=<ID> (
      <LBRACKET> (fds=nt_FieldDecl(){fdl.add(fds);})* (mds=nt_MethodDecl(){mdl.add(mds);})* <RBRACKET> { return new ClassDecl(t.image, fdl, mdl); }
      | <EXTENDS> t2=<ID> <LBRACKET> (fds=nt_FieldDecl(){fdl.add(fds);})* (mds=nt_MethodDecl(){mdl.add(mds);})* <RBRACKET> { return new ClassDeclExtends(t.image, t2.image, fdl, mdl);}
    )
}

public FieldDecl nt_FieldDecl() :
{
Type t;
Token t1;
}
{
  t=nt_Type() t1=<ID> <SEMICOLON> { return new FieldDecl(t, t1.image); }
}

public MethodDecl nt_MethodDecl() :
{
MethodDecl mds;
}
{
  (mds=nt_ProcDecl() | mds=nt_FunDecl())
  { return mds; }
}

public ProcDecl nt_ProcDecl() :
{
Token t1;
List<Formal> fml;
List<Stm> stl = new LinkedList<Stm>();
Stm st;
}
{
  <PROC> t1=<ID> <LPAREN> fml=nt_FormalList() <RPAREN> <LBRACKET> (st=nt_Statement(){stl.add(st);})* <RBRACKET>
  { return new ProcDecl(t1.image, fml, stl);}
}

public FunDecl nt_FunDecl() :
{
Type t;
Token t1;
List<Formal> fml;
List<Stm> stl = new LinkedList<Stm>();
Stm st;
Exp ex;
}
{
  <FUN> t=nt_Type() t1=<ID> <LPAREN> fml=nt_FormalList() <RPAREN>
  <LBRACKET> (st=nt_Statement() {stl.add(st);})* <RETURN> ex=nt_Exp() <SEMICOLON> <RBRACKET>
  {return new FunDecl(t, t1.image, fml, stl, ex);}
}

public List<Formal> nt_FormalList() :
{
Type t;
Token t1;
List<Formal> fml = new LinkedList<Formal>();
Formal fm;
}
{
    t=nt_Type() t1=<ID> {fml.add(new Formal(t, t1.image));} (fm=nt_FormalRest(){fml.add(fm);})*
    | {return fml; }
}

public Formal nt_FormalRest() :
{
Type t;
Token t1;
}
{
 <COMMA> t=nt_Type() t1=<ID> { return new Formal(t, t1.image); }
}

public Type nt_Type() :
{
Type t;
Token t1;
}
{
  (
    t1=<BOOLEAN> { t=new TypeBoolean(); }
  | t1=<INT> { t=new TypeInt(); }
  | t1=<ID> { t=new TypeClassType(t1.image); }
  )
  (
  (LOOKAHEAD(2) <L_SQR_BRACKET> <R_SQR_BRACKET> {t=new TypeArray(t); })*
  ) { return t; }
}

public Stm nt_Statement() :
{
Type t;
Token t1;
Var var;
Exp ex1, ex2, expe;
List<Exp> exl;
Stm bl1, bl2;
}
{
    bl1=nt_Block() { return bl1; }
  | <LOCAL> t=nt_Type() t1=<ID> <SEMICOLON> { return new StmVarDecl(t, t1.image); }
  | LOOKAHEAD(2) var=nt_Var() <ASSIGN_OP> ex1=nt_Exp() <SEMICOLON> { return new StmAssign(var, ex1); }
  | expe=nt_PrimaryExp() (
      <L_SQR_BRACKET> ex1=nt_Exp() <R_SQR_BRACKET> <ASSIGN_OP> ex2=nt_Exp() <SEMICOLON> { return new StmArrayAssign(expe, ex1, ex2); }
    | <PERIOD> t1=<ID> <LPAREN> exl=nt_ExpList() <RPAREN> <SEMICOLON> { return new StmCall(expe, t1.image, exl); }
  )
  | <IF> <LPAREN> ex1=nt_Exp() <RPAREN> <THEN> bl1=nt_Statement() <ELSE> bl2=nt_Statement() {return new StmIf(ex1, bl1, bl2);}
  | <WHILE> <LPAREN> ex1=nt_Exp() <RPAREN> <DO> bl1=nt_Statement() { return new StmWhile(ex1, bl1); }
  | <OUTPUT> ex1=nt_Exp() <SEMICOLON> {return new StmOutput(ex1);}
}

public StmBlock nt_Block() :
{
List<Stm> stl = new LinkedList<Stm>();
Stm stm;
}
{
  <LBRACKET> (stm=nt_Statement() {stl.add(stm);})* <RBRACKET> { return new StmBlock(stl);}
}

public Exp nt_Exp() :
{
Token t1;
ExpOp.Op op;
Exp ex1, ex2, ex3;
List<Exp> exl;
}
{
    ex1=nt_PrimaryExp() (
    op=nt_Op() ex2=nt_PrimaryExp() { return new ExpOp(ex1, op, ex2); }
  | <L_SQR_BRACKET> ex3=nt_Exp() <R_SQR_BRACKET> { return new ExpArrayLookup(ex1, ex3);}
  | <PERIOD> (
    <LENGTH> { return new ExpArrayLength(ex1);}
    | t1=<ID> <LPAREN> exl=nt_ExpList() <RPAREN> { return new ExpCall(ex1, t1.image, exl);}
    )
    | { return ex1; } )
}

public Exp nt_PrimaryExp() :
{
Exp ex1, ex2;
Type t;
Token t1;
Var var;
List<Exp> exl = new LinkedList<Exp>();
}
{
    t1= <INTEGER_LITERAL> { return new ExpInteger(Integer.parseInt(t1.image));}
  | <TRUE> { return new ExpTrue(); }
  | <FALSE> { return new ExpFalse(); }
  | var=nt_Var() { return new ExpVar(var); }
  | <SELF> { return new ExpSelf(); }
  | LOOKAHEAD(3) <NEW> t1=<ID> <LPAREN> exl=nt_ExpList() <RPAREN> { return new ExpNewObject(t1.image, exl); }
  | <NEW> t=nt_Type() <L_SQR_BRACKET> ex1=nt_Exp() <R_SQR_BRACKET> { return new ExpNewArray(t, ex1); }
  | <NOT> ex2=nt_PrimaryExp() {return new ExpNot(ex2); }
  | <ISNULL> ex2=nt_PrimaryExp() { return new ExpIsnull(ex2); }
  | <LPAREN> ex1=nt_Exp() <RPAREN> { return ex1; }
}

public Var nt_Var() :
{
Token t1;
}
{
  t1=<ID>
  { return new Var(t1.image);}
}

public List<Exp> nt_ExpList() :
{
Exp ex1;
List<Exp> exl = new LinkedList<Exp>();
}
{
    ex1=nt_Exp() {exl.add(ex1); } (ex1=nt_ExpRest() {exl.add(ex1); })*
    { return exl; }
  | { return exl; }
}

public Exp nt_ExpRest() :
{
Exp ex1;
}
{
  <COMMA> ex1=nt_Exp() { return ex1; }
}

public ExpOp.Op nt_Op() :
{
}
{
    <LOG_AND> {return ExpOp.Op.AND;}
  | <LESS_THAN> {return ExpOp.Op.LESSTHAN;}
  | <EQUAL_TO> {return ExpOp.Op.EQUALS;}
  | <DIV> {return ExpOp.Op.DIV;}
  | <ADD> {return ExpOp.Op.PLUS;}
  | <SUBT> {return ExpOp.Op.MINUS;}
  | <MULT> {return ExpOp.Op.TIMES;}
}
